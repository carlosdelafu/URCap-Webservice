def unnamed():
  set_gravity([0.0, 0.0, 9.82])
  set_safety_mode_transition_hardness(1)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
  set_payload(0.0)
  global i_var_2=1
  global i_var_1=p[0.14195, -0.42508, 0.14607, -0.91502, 2.98755, 0.04875]
  # begin: URCap Installation Node
  #   Source: NAST Webservice, 0.0.21, NAST Automation
  #   Type: NAST Webservice
  webDaemon = rpc_factory("xmlrpc","http://127.0.0.1:33025/RPC2")
  # end: URCap Installation Node
  global Waypoint_1_p=p[-.143968656714, -.435620060803, .202030025428, -.001221359682, 3.116276528482, .038891915637]
  global Waypoint_1_q=[-1.6006999999999998, -1.7271, -2.2029999999999994, -0.8079999999999998, 1.5951, -0.030999999999999694]
  global Waypoint_2_p=p[-.028459484627, -.432400959956, .318300840704, -.420860126861, 3.040454577291, -.372352032399]
  global Waypoint_2_q=[-1.329699999999999, -1.4560999999999993, -2.2029999999999994, -0.8079999999999998, 1.5951, -0.030999999999999694]
  $ 6 "Thread_1"
  thread Thread_1():
    while (True):
      $ 7 "Wait: 0.5"
      sleep(0.5)
      $ 8 "i_var_1 = get_target_tcp_pose()"
      i_var_1 =  get_target_tcp_pose ()
      # begin: URCap Program Node
      #   Source: NAST Webservice, 0.0.21, NAST Automation
      #   Type: Webservice
      $ 9 "Webservice"
      serviceResult = webDaemon.requestWebserver("https://api.example.de/","API-KEY-1234", "simpleServerScript.php",i_var_1)
      if (serviceResult != 200):
        popup( str_cat("Err: ",serviceResult), title="Error", error=True, blocking=True)
      end
      # end: URCap Program Node
    end
  end
  threadId_Thread_1 = run Thread_1()
  while (True):
    $ 1 "Robot Program"
    $ 2 "MoveJ"
    $ 3 "Waypoint_1"
    movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 4 "Waypoint_2"
    movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 5 "Waypoint_1"
    movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
  end
end
